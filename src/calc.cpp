/*
   Author: Sherman Chen
   Create Time: 2023-02-12
   Email: schen@simviu.com
   Copyright(c): Simviu Inc.
   Website: https://www.simviu.com
 */


#include "stereolib/stereolibCv.h"
using namespace stereo;
//----
namespace{
}


//---------------
// im3d_to_pnts
//---------------
// im3d disparity to points
void stereo::calc_disp_to_pnts(
        const Recon3d::Cfg& cfg,
        cv::Mat imd, Points& pnts)
{
     pnts.clear();
    int k=0;
    int tp = imd.type();
    for(unsigned int i = 0; i < imd.rows; i++)
    {
        float* prow = (float*)imd.ptr<CV_32F>(i);
        for(unsigned int j = 0; j < imd.cols; j++)
        {
            Points::Pnt p;
            double z = prow[j];
        }
    }
}
//---------------
// im3d_to_pnts
//---------------
// im3d is points generated by cv::reprojectImageTo3D
void stereo::calc_im3d_to_pnts(
        const Recon3d::Cfg& cfg,
        cv::Mat im3d, Points& pnts)
{
    pnts.clear();
    int k=0;
    int tp = im3d.type();
    for(unsigned int i = 0; i < im3d.rows; i++)
    {
        cv::Vec3f *point = im3d.ptr<cv::Vec3f>(i);

        for(unsigned int j = 0; j < im3d.cols; j++)
        {
            Points::Pnt p;

            double x,y,z;
            x = point[j][0];
            y = point[j][1];
            z = point[j][2];
            // filter invalid
            if(!(isValid(x) && isValid(y) && isValid(z)))
            {
                k++;
                continue;
            }
            //---- filter depth range
            auto& dc = cfg.depth;
            if(!dc.range.isIn(z))
                continue;
            //----
            p.p << x,y,z;
            p.c = {255,255,255,255};
            pnts.add(p);
        }
    }
    //----
    log_d("  im3d_to_pnts() invalid n="+to_string(k));
}
